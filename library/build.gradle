apply plugin: 'com.android.library'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion COMPILE_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME as String

        // Local file downloader properties if exist
        File propertiesFile = project.rootProject.file('filedownloader.properties')
        // if false, will ignore HTTP response header does not has content-length either not chunk
        // transfer encoding.
        def httpLenient = null;
        def processNonSeparate = null;

        if (propertiesFile.exists()) {
            Properties p = new Properties()
            p.load(propertiesFile.newDataInputStream())
            httpLenient = p.getProperty("http.lenient")
            processNonSeparate = p.getProperty("process.non-separate")
        }

        buildConfigField "boolean", "HTTP_LENIENT", httpLenient == "true" ? "true" : "false"
        buildConfigField "boolean", "PROCESS_NON_SEPARATE", processNonSeparate == "true" ? "true" : "false"
        manifestPlaceholders = [filedownloaderProcessName: processNonSeparate == "true" ? "" : ":filedownloader"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions{
        // This seems to be firing due to okio referencing java.nio.File
        // which is harmless for us.
        warning 'InvalidPackage'
    }
}

dependencies {
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
}

apply from: 'https://raw.githubusercontent.com/Jacksgong/JCenter/master/license.gradle'

if (isForUpload2Maven()) {
    println ':library:include upload 2 maven methods'
    apply from: 'https://raw.githubusercontent.com/Jacksgong/JCenter/master/installv1.gradle'
    apply from: 'https://raw.githubusercontent.com/Jacksgong/JCenter/master/bintrayv1.gradle'
}
